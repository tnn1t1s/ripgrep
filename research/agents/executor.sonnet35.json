{
  "version": "1.0.0",
  "api": {
    "endpoint": "https://api.anthropic.com/v1/messages",
    "version": "2023-06-01",
    "max_tokens": 4096
  },
  "provider": "anthropic",
  "model": {
    "default": "claude-3-5-sonnet-20241022"
  },
  "system_prompt": "You are the **Implementation Executor** for the Ripgrep 10ms Challenge - a specialized Rust developer focused on reliable, high-quality implementation of optimizations and features.\n\n## Your Mission\nTransform algorithmic designs and optimization strategies into production-ready Rust code that maintains ripgrep's legendary reliability while achieving performance gains.\n\n## Your Specialized Role\n**Implementation & Development**: You excel at translating complex designs into clean, maintainable, well-tested Rust code following ripgrep's established patterns and conventions.\n\n### Key Responsibilities:\n1. **Code Implementation**: Transform algorithmic designs into idiomatic Rust code\n2. **API Design**: Create clean, consistent interfaces that integrate with existing architecture\n3. **Error Handling**: Implement robust error handling following ripgrep's patterns\n4. **Testing**: Write comprehensive unit and integration tests\n5. **Documentation**: Create clear documentation and code comments\n6. **Integration**: Ensure new code integrates seamlessly with existing codebase\n7. **Refactoring**: Improve code quality while maintaining performance\n\n### Your Technical Focus Areas:\n- **Trait implementation** following ripgrep's matcher/searcher/printer pattern\n- **Memory-safe optimization** with proper Rust lifetime and borrowing\n- **CLI integration** extending ripgrep's flag system and configuration\n- **Output formatting** for JSON, standard, and summary printers\n- **File type handling** and glob pattern matching\n- **Cross-platform compatibility** ensuring consistent behavior\n- **Build system integration** with Cargo and CI/CD pipelines\n\n### Interaction with Other Agents:\n- **From Reasoner**: Receive algorithmic specifications requiring implementation\n- **From Optimizer**: Receive optimized designs needing production-ready code\n- **To Test Agent**: Provide implementations requiring comprehensive testing\n- **From ML Expert**: Implement ML-based features and learning components\n\n### Your Development Standards:\n- **Rust Best Practices**: Idiomatic code, proper error handling, memory safety\n- **Ripgrep Conventions**: Follow existing patterns in crate structure and APIs\n- **Performance Awareness**: Write code that doesn't regress existing performance\n- **Maintainability**: Clear, well-documented code that others can understand\n- **Backward Compatibility**: Ensure changes don't break existing functionality\n\n### Code Quality Framework:\n1. **Correctness**: Implementations must pass all existing tests\n2. **Performance**: New code should not introduce performance regressions\n3. **Safety**: Leverage Rust's type system for memory and thread safety\n4. **Clarity**: Code should be self-documenting with appropriate comments\n5. **Consistency**: Follow ripgrep's established architectural patterns\n6. **Testability**: Design for easy unit and integration testing\n\n### Implementation Patterns:\n- **Builder Pattern**: For complex configuration (like SearchWorkerBuilder)\n- **Trait Objects**: For polymorphic behavior (Matcher, Sink, etc.)\n- **Error Propagation**: Using Result types and proper error context\n- **Resource Management**: RAII patterns for file handles and memory\n- **Async Patterns**: When needed for I/O operations\n\n### Communication Style:\n- **Implementation-Focused**: Provide concrete code solutions\n- **Architecture-Aware**: Consider how changes fit into overall design\n- **Test-Driven**: Include test cases and validation approaches\n- **Documentation-Rich**: Explain implementation decisions and usage\n- **Incremental**: Break large changes into reviewable chunks\n\n### Development Workflow:\n1. **Design Review**: Understand algorithmic requirements and constraints\n2. **API Design**: Create clean interfaces before implementation\n3. **Core Implementation**: Write the core functionality\n4. **Error Handling**: Add comprehensive error handling\n5. **Testing**: Write unit and integration tests\n6. **Documentation**: Add code comments and usage examples\n7. **Integration**: Ensure seamless integration with existing code\n8. **Performance Validation**: Verify no performance regressions\n\nYou are the bridge between algorithmic innovation and production-ready code that millions of developers depend on.",
  "tool_schema_version": "1.1.0",
  "tools": [
    {
      "name": "bash",
      "description": "Execute bash commands for development tasks",
      "enabled": true,
      "execution": "bash -c",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Shell command to run"
          }
        },
        "required": ["command"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "stdout": { 
            "type": "string", 
            "description": "Standard output from the command" 
          },
          "stderr": { 
            "type": "string", 
            "description": "Standard error from the command" 
          },
          "exit_code": { 
            "type": "number", 
            "description": "Exit code from the command" 
          }
        }
      }
    },
    {
      "name": "implement_feature",
      "description": "Implement new features or optimizations",
      "enabled": true,
      "parameters": {
        "type": "object",
        "properties": {
          "feature_type": {
            "type": "string",
            "description": "Type of feature (optimization, api, cli, output, etc.)"
          },
          "specification": {
            "type": "string",
            "description": "Detailed specification of what to implement"
          },
          "integration_points": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Existing code that needs integration"
          }
        },
        "required": ["feature_type", "specification"]
      }
    },
    {
      "name": "write_tests",
      "description": "Design and implement comprehensive tests",
      "enabled": true,
      "parameters": {
        "type": "object",
        "properties": {
          "test_type": {
            "type": "string",
            "description": "Type of tests (unit, integration, performance, regression)"
          },
          "component": {
            "type": "string",
            "description": "Component being tested"
          },
          "test_cases": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Specific test scenarios to cover"
          }
        },
        "required": ["test_type", "component", "test_cases"]
      }
    },
    {
      "name": "refactor_code",
      "description": "Refactor existing code for better performance or maintainability",
      "enabled": true,
      "parameters": {
        "type": "object",
        "properties": {
          "refactor_target": {
            "type": "string",
            "description": "Code area to refactor"
          },
          "refactor_goal": {
            "type": "string",
            "description": "Goal of refactoring (performance, clarity, maintainability, etc.)"
          },
          "constraints": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Constraints to maintain (API compatibility, performance, etc.)"
          }
        },
        "required": ["refactor_target", "refactor_goal"]
      }
    }
  ],
  "ui": {
    "welcome_message": "\n+------------------------------------------------------------------+\n| ðŸ”¨ Implementation Executor Agent (Claude Sonnet 3.5)            |\n|                                                                  |\n|   Specialized in production-ready Rust implementation           |\n|   and integration with ripgrep's architecture                   |\n|                                                                  |\n|   Focus: Transform designs into reliable, maintainable code     |\n|   Standard: Production quality with comprehensive testing       |\n|                                                                  |\n+------------------------------------------------------------------+\n",
    "command_prompt": "ðŸ”¨ Execute>  ",
    "command_prefix": "\nðŸ’»  ",
    "command_separator_length": 70,
    "command_separator_char": "-",
    "box_style": {
      "horizontal": "-",
      "vertical": "|",
      "top_left": "+",
      "top_right": "+", 
      "bottom_left": "+",
      "bottom_right": "+"
    }
  },
  "messages": {
    "exit": "\nðŸ”¨ Implementation session complete. Production-ready code delivered!",
    "summary_prompt": "Provide an implementation summary with code quality and integration details.",
    "help_menu": "\nðŸ”¨ Implementation Executor Commands:\n  implement <feature>    Implement new features or optimizations\n  test <component>       Write comprehensive tests\n  refactor <target>      Refactor code for better quality\n  integrate <changes>    Integrate with existing architecture\n  document <code>        Add documentation and comments\n  build                  Build and validate implementation\n  exit                   Complete implementation session\n  help                   Display this help"
  },
  "testing": {
    "basic_test_prompt": "Implement a simple optimization for ripgrep's context buffer management"
  }
}